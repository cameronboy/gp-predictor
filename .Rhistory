year, event, session, riderNumber, Rider, sector
) %>%
mutate(
sector_mean = mean(sector_time, na.rm=TRUE),
sector_std = sd(sector_time, na.rm=TRUE)
) %>%
filter(
riderNumber == 5 &
event == "DOH" &
session == "FP1"
) %>%
arrange(run_number, LapNumber) %>%
spread(
key="sector",
value="sector_mean", "sector_std"
)
G <- df %>%
gather(key="sector", value="sector_time", T1, T2, T3, T4) %>%
filter(LapType == "Speed") %>%
group_by(
year, event, session, riderNumber, Rider, sector
) %>%
mutate(
sector_mean = mean(sector_time, na.rm=TRUE),
sector_std = sd(sector_time, na.rm=TRUE)
) %>%
filter(
riderNumber == 5 &
event == "DOH" &
session == "FP1"
) %>%
arrange(run_number, LapNumber) %>%
spread(
key="sector",
value=c(sector_mean,sector_std)
)
rm(list = ls())
library(tabulizer)
library(tidyverse)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
session <- c("FP1", "FP2")# , "FP3" ,"FP4","Q1","Q2","WUP","RAC")
event <- c("QAT", "DOH")#, "POR", "SPA", "FRA", "ITA", "CAT", "GER", "NED", "STY", "AUT", "GBR", "ARA", "RSM", "AME", "EMI", "ALR", "VAL")
year <- c(2021)
AA <- c(164.88604, 53.921875, 731.85, 314.978125)
AB <- c(164.88604, 317.953125, 731.85, 576.7781250)
ZA <- c(40.90625, 53.921875, 731.85, 314.978125)
ZB <- c(40.90625, 317.9531255, 731.85, 576.778125)
entry_area <- c(134.12389, 60.92034, 444.59587, 550.22420)
# Regexps:
rexp_times = "(\\d+\\'\\d{2}\\.\\d{3}\\*?|\\d{2,3}\\.\\d{3}\\*?)"
rexp_pos = "(\\d+)(?=(st|nd|rd|th))"
rexp_total_laps = "(?<=Total laps\\=)\\d+"
rexp_full_laps = "(?<=Full laps\\=)\\d+"
rexp_runs = "(?<=Runs\\=)\\d+"
rexp_f_tire = "(?<=(F|f)ront\\s{0,100}Tyre\\s{0,100})(((S|s)lick|(W|w)et)-(Hard|Medium|Soft))"
rexp_r_tire = "(?<=(R|r)ear\\s{0,100}Tyre\\s{0,100})(((S|s)lick|(W|w)et)-(Hard|Medium|Soft))"
rexp_tire_life = "(\\d+(?= Laps at start)|New Tyre)"
rexp_speed = "\\d{2,3}\\.\\d{1}(?!\\d)"
rexp_rider_number = "(?<=((\\d{1,2})?(1st|2nd|3rd|\\dth))\\s{0,100})\\d+"
rexp_run_number = "(?<=Run\\s?#\\s?)\\d+"
rexp_lap_number = "\\d+(?=\\s)"
rexp_lap_minutes = "^\\d+(?=\\')"
rexp_lap_seconds = "(?<=\\')\\d+\\.\\d+"
events_df <- expand.grid(year, event, session) %>%
as_tibble() %>%
rename(year = Var1, event = Var2, session = Var3)
entries_df <- events_df %>%
select(year, event) %>%
distinct()
master_event_list <- split(events_df, seq(nrow(events_df)))
entries_list <- split(entries_df, seq(nrow(entries_df)))
createResultsUrl <- function(row) {
url <- c(
paste0("http://resources.motogp.com/files/results/", row$year, "/", row$event, "/MotoGP/", row$session,"/Analysis.pdf"),
row
)
url
}
createEntryUrl <- function(row) {
url <- c(
paste0("https://resources.motogp.com/files/results/", row$year, "/", row$event, "/MotoGP/Entry.pdf"),
row
)
url
}
results_urls <- map(master_event_list, createResultsUrl)
entries_urls <- map(entries_list, createEntryUrl)
#Get The Area Function
GetArea <- function(x) {
y <- vector('list',x)
for (i in seq(x)) {
if (i == 1) { y[[i]] <- AA}
else if (i == 2) { y[[i]] <- AB}
else if (i %% 2 != 0) {y[[i]] <- ZA}
else {y[[i]] <- ZB}
}
return(y)
}
cleanTables <- function(table_strings) {
table_strings[ ,which(!apply(table_strings,2,FUN = function(x){all(x == "")}))] %>%
as_tibble() %>%
unite("data", sep=" ")
}
processResultsUrl <- function(url_data){
url <- url_data[[1]]
year_ <- url_data[[2]]
event_ <- url_data[[3]]
session_ <- url_data[[4]]
p <- get_n_pages(url)
pages <- as.numeric(as.integer(seq(1, p + .5, .5)))
area <- GetArea(2*p)
ts <- extract_tables(url, pages = pages, guess = FALSE, area = area)
ts <- map(ts, cleanTables)
print(url)
results <- ts %>%
reduce(rbind) %>%
as_tibble() %>%
mutate(
year = year_,
event = event_,
session = session_
)
results
}
processEntriesUrl <- function(url_data){
url <- url_data[[1]]
year_ <- url_data[[2]]
event_ <- url_data[[3]]
riders <- extract_tables(url, pages=1, guess=FALSE, area = list(entry_area), output = "data.frame")[[1]] %>%
as_tibble() %>%
mutate(
year = year_,
event = event_
) %>%
rename(riderNumber = X.1)
riders
}
results <- map(results_urls, processResultsUrl) %>% reduce(rbind) %>% as_tibble()
entries <- map(entries_urls, processEntriesUrl) %>% reduce(rbind) %>% as_tibble()
df <- results %>%
mutate(TotalLaps   = as.integer(str_extract(data, rexp_total_laps)),
FullLaps    = as.integer(str_extract(data, rexp_full_laps)),
speed       = as.double(str_extract(data, rexp_speed)),
FrontTire   = str_extract(data, rexp_f_tire),
RearTire    = str_extract(data, rexp_r_tire),
run_number  = as.integer(str_extract(data, rexp_run_number)),
riderNumber = as.integer(str_extract(data, rexp_rider_number)),
pitting     = str_extract(data, 'P'),
invalidatedLap = !is.na(str_extract(data, "\\*")),
lap_unfinished = case_when(str_extract(data, "unfinished") == "unfinished" ~ TRUE, TRUE ~ FALSE),
LapTime     = case_when((!is.na(lap_unfinished) & !lap_unfinished) ~ str_extract(data, rexp_times)),
RiderPosition = as.integer(str_extract(data, rexp_pos))
) %>%
left_join(entries, by = c("year", "event", "riderNumber")) %>%
fill(c("riderNumber","X","Rider","Nation","Team","Motorcycle","run_number","FrontTire","RearTire","TotalLaps","FullLaps", "RiderPosition")) %>%
slice(-1) %>%
group_by(Rider, data) %>%
mutate(
T1 = str_extract_all(data, rexp_times)[[1]][2],
T2 = str_extract_all(data, rexp_times)[[1]][3],
T3 = str_extract_all(data, rexp_times)[[1]][4],
T4 = str_extract_all(data, rexp_times)[[1]][5]
) %>%
mutate(
Front_tire_age = str_extract_all(data, rexp_tire_life)[[1]][1],
Rear_tire_age  = str_extract_all(data, rexp_tire_life)[[1]][2],
Front_tire_age = as.integer(recode(Front_tire_age, "New Tyre" = "0")),
Rear_tire_age = as.integer(recode(Rear_tire_age, "New Tyre" = "0")),
is_lap = !is.na(LapTime)
) %>%
group_by(Rider, is_lap, year, event, session) %>%
mutate(
LapNumber = case_when(is_lap ~row_number()),
LapType =  case_when(
!is.na(pitting) & is_lap ~ "In",
!is.na(lag(pitting)) & is_lap  ~ "Out",
LapNumber == 1 ~ "Out",
TRUE ~ "Speed"
),
run_number = case_when(is_lap ~ run_number)
) %>%
rename(
riderDesc = X
) %>%
select(data, is_lap, year, event, session, RiderPosition, riderNumber, Rider:Motorcycle, riderDesc, TotalLaps, FullLaps, run_number, FrontTire, RearTire, Front_tire_age, Rear_tire_age, invalidatedLap,lap_unfinished, LapNumber, LapType, LapTime, T1, T2, T3, T4, speed) %>%
group_by() %>%
fill(c("Front_tire_age", "Rear_tire_age")) %>%
group_by(Rider, run_number, is_lap, year, event, session) %>%
mutate(
Front_tire_age = min(Front_tire_age, na.rm=TRUE) + row_number() - 1,
Rear_tire_age = min(Rear_tire_age, na.rm=TRUE) + row_number() - 1
) %>%
group_by() %>%
filter(is_lap) %>%
select(-is_lap) %>%
mutate(
Invalidated_T1 = str_extract(T1, "\\*") == "*",
Invalidated_T2 = str_extract(T2, "\\*") == "*",
Invalidated_T3 = str_extract(T3, "\\*") == "*",
Invalidated_T4 = str_extract(T4, "\\*") == "*",
T1 = str_replace(T1, "\\*", ""),
T2 = str_replace(T2, "\\*", ""),
T3 = str_replace(T3, "\\*", ""),
T4 = str_replace(T4, "\\*", ""),
LapTimeSeconds = as.double(str_extract(LapTime, rexp_lap_minutes)) * 60.0 + as.double(str_extract(LapTime, rexp_lap_seconds)),
T1 = if_else(!is.na(str_match(T1, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double(str_extract(T1, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T1, rexp_lap_seconds)),
as.double(T1)),
T2 = if_else(!is.na(str_match(T2, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double( str_extract(T2, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T2, rexp_lap_seconds)),
as.double(T2)),
T3 = if_else(!is.na(str_match(T3, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double( str_extract(T3, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T3, rexp_lap_seconds)),
as.double(T3)),
T4 = if_else(!is.na(str_match(T4, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double(str_extract(T4, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T4, rexp_lap_seconds)),
as.double(T4))
)
View(df)
df %>%
gather(key="sector", value="sector_time", T1, T2, T3, T4) %>%
filter(LapType == "Speed") %>%
group_by(
year, event, session, riderNumber, Rider, sector
) %>%
mutate(
sector_mean = mean(sector_time, na.rm=TRUE),
sector_std = sd(sector_time, na.rm=TRUE)
) %>%
filter(
riderNumber == 5 &
event == "DOH" &
session == "FP1"
) %>%
arrange(run_number, LapNumber) %>%
spread(
key="sector",
value=c(sector_mean,sector_std)
)
df %>%
gather(key="sector", value="sector_time", T1, T2, T3, T4) %>%
filter(LapType == "Speed") %>%
group_by(
year, event, session, riderNumber, Rider, sector
) %>%
mutate(
sector_mean = mean(sector_time, na.rm=TRUE),
sector_std = sd(sector_time, na.rm=TRUE)
) %>%
filter(
riderNumber == 5 &
event == "DOH" &
session == "FP1"
) %>%
arrange(run_number, LapNumber) %>%
spread(
key="sector",
value=c(sector_mean,sector_std)
)
practice <- df %>% filter(session != 'RAC')
races <- df %>%  filter(session == 'RAC')
df %>%
gather(key="sector", value="sector_time", T1, T2, T3, T4) %>%
filter(LapType == "Speed") %>%
group_by(
year, event, session, riderNumber, Rider, sector
) %>%
mutate(
sector_mean = mean(sector_time, na.rm=TRUE),
sector_std = sd(sector_time, na.rm=TRUE)
) %>%
filter(
riderNumber == 5 &
event == "DOH" &
session == "FP1"
) %>%
arrange(run_number, LapNumber)
practice <- df %>% filter(session != 'RAC')
races <- df %>%  filter(session == 'RAC')
races <- df %>%  filter(session == 'RAC') %>% select(year, event, riderNumber, RiderPosition)
races
#Some important Variables to define the overall list of sessions to process
session <- c("FP1", "FP2", "RAC")# , "FP3" ,"FP4","Q1","Q2","WUP","RAC")
event <- c("QAT", "DOH")#, "POR", "SPA", "FRA", "ITA", "CAT", "GER", "NED", "STY", "AUT", "GBR", "ARA", "RSM", "AME", "EMI", "ALR", "VAL")
year <- c(2021)
AA <- c(164.88604, 53.921875, 731.85, 314.978125)
AB <- c(164.88604, 317.953125, 731.85, 576.7781250)
ZA <- c(40.90625, 53.921875, 731.85, 314.978125)
ZB <- c(40.90625, 317.9531255, 731.85, 576.778125)
entry_area <- c(134.12389, 60.92034, 444.59587, 550.22420)
# Regexps:
rexp_times = "(\\d+\\'\\d{2}\\.\\d{3}\\*?|\\d{2,3}\\.\\d{3}\\*?)"
rexp_pos = "(\\d+)(?=(st|nd|rd|th))"
rexp_total_laps = "(?<=Total laps\\=)\\d+"
rexp_full_laps = "(?<=Full laps\\=)\\d+"
rexp_runs = "(?<=Runs\\=)\\d+"
rexp_f_tire = "(?<=(F|f)ront\\s{0,100}Tyre\\s{0,100})(((S|s)lick|(W|w)et)-(Hard|Medium|Soft))"
rexp_r_tire = "(?<=(R|r)ear\\s{0,100}Tyre\\s{0,100})(((S|s)lick|(W|w)et)-(Hard|Medium|Soft))"
rexp_tire_life = "(\\d+(?= Laps at start)|New Tyre)"
rexp_speed = "\\d{2,3}\\.\\d{1}(?!\\d)"
rexp_rider_number = "(?<=((\\d{1,2})?(1st|2nd|3rd|\\dth))\\s{0,100})\\d+"
rexp_run_number = "(?<=Run\\s?#\\s?)\\d+"
rexp_lap_number = "\\d+(?=\\s)"
rexp_lap_minutes = "^\\d+(?=\\')"
rexp_lap_seconds = "(?<=\\')\\d+\\.\\d+"
events_df <- expand.grid(year, event, session) %>%
as_tibble() %>%
rename(year = Var1, event = Var2, session = Var3)
entries_df <- events_df %>%
select(year, event) %>%
distinct()
master_event_list <- split(events_df, seq(nrow(events_df)))
entries_list <- split(entries_df, seq(nrow(entries_df)))
createResultsUrl <- function(row) {
url <- c(
paste0("http://resources.motogp.com/files/results/", row$year, "/", row$event, "/MotoGP/", row$session,"/Analysis.pdf"),
row
)
url
}
createEntryUrl <- function(row) {
url <- c(
paste0("https://resources.motogp.com/files/results/", row$year, "/", row$event, "/MotoGP/Entry.pdf"),
row
)
url
}
results_urls <- map(master_event_list, createResultsUrl)
entries_urls <- map(entries_list, createEntryUrl)
#Get The Area Function
GetArea <- function(x) {
y <- vector('list',x)
for (i in seq(x)) {
if (i == 1) { y[[i]] <- AA}
else if (i == 2) { y[[i]] <- AB}
else if (i %% 2 != 0) {y[[i]] <- ZA}
else {y[[i]] <- ZB}
}
return(y)
}
cleanTables <- function(table_strings) {
table_strings[ ,which(!apply(table_strings,2,FUN = function(x){all(x == "")}))] %>%
as_tibble() %>%
unite("data", sep=" ")
}
processResultsUrl <- function(url_data){
url <- url_data[[1]]
year_ <- url_data[[2]]
event_ <- url_data[[3]]
session_ <- url_data[[4]]
p <- get_n_pages(url)
pages <- as.numeric(as.integer(seq(1, p + .5, .5)))
area <- GetArea(2*p)
ts <- extract_tables(url, pages = pages, guess = FALSE, area = area)
ts <- map(ts, cleanTables)
print(url)
results <- ts %>%
reduce(rbind) %>%
as_tibble() %>%
mutate(
year = year_,
event = event_,
session = session_
)
results
}
processEntriesUrl <- function(url_data){
url <- url_data[[1]]
year_ <- url_data[[2]]
event_ <- url_data[[3]]
riders <- extract_tables(url, pages=1, guess=FALSE, area = list(entry_area), output = "data.frame")[[1]] %>%
as_tibble() %>%
mutate(
year = year_,
event = event_
) %>%
rename(riderNumber = X.1)
riders
}
results <- map(results_urls, processResultsUrl) %>% reduce(rbind) %>% as_tibble()
entries <- map(entries_urls, processEntriesUrl) %>% reduce(rbind) %>% as_tibble()
df <- results %>%
mutate(TotalLaps   = as.integer(str_extract(data, rexp_total_laps)),
FullLaps    = as.integer(str_extract(data, rexp_full_laps)),
speed       = as.double(str_extract(data, rexp_speed)),
FrontTire   = str_extract(data, rexp_f_tire),
RearTire    = str_extract(data, rexp_r_tire),
run_number  = as.integer(str_extract(data, rexp_run_number)),
riderNumber = as.integer(str_extract(data, rexp_rider_number)),
pitting     = str_extract(data, 'P'),
invalidatedLap = !is.na(str_extract(data, "\\*")),
lap_unfinished = case_when(str_extract(data, "unfinished") == "unfinished" ~ TRUE, TRUE ~ FALSE),
LapTime     = case_when((!is.na(lap_unfinished) & !lap_unfinished) ~ str_extract(data, rexp_times)),
RiderPosition = as.integer(str_extract(data, rexp_pos))
) %>%
left_join(entries, by = c("year", "event", "riderNumber")) %>%
fill(c("riderNumber","X","Rider","Nation","Team","Motorcycle","run_number","FrontTire","RearTire","TotalLaps","FullLaps", "RiderPosition")) %>%
slice(-1) %>%
group_by(Rider, data) %>%
mutate(
T1 = str_extract_all(data, rexp_times)[[1]][2],
T2 = str_extract_all(data, rexp_times)[[1]][3],
T3 = str_extract_all(data, rexp_times)[[1]][4],
T4 = str_extract_all(data, rexp_times)[[1]][5]
) %>%
mutate(
Front_tire_age = str_extract_all(data, rexp_tire_life)[[1]][1],
Rear_tire_age  = str_extract_all(data, rexp_tire_life)[[1]][2],
Front_tire_age = as.integer(recode(Front_tire_age, "New Tyre" = "0")),
Rear_tire_age = as.integer(recode(Rear_tire_age, "New Tyre" = "0")),
is_lap = !is.na(LapTime)
) %>%
group_by(Rider, is_lap, year, event, session) %>%
mutate(
LapNumber = case_when(is_lap ~row_number()),
LapType =  case_when(
!is.na(pitting) & is_lap ~ "In",
!is.na(lag(pitting)) & is_lap  ~ "Out",
LapNumber == 1 ~ "Out",
TRUE ~ "Speed"
),
run_number = case_when(is_lap ~ run_number)
) %>%
rename(
riderDesc = X
) %>%
select(data, is_lap, year, event, session, RiderPosition, riderNumber, Rider:Motorcycle, riderDesc, TotalLaps, FullLaps, run_number, FrontTire, RearTire, Front_tire_age, Rear_tire_age, invalidatedLap,lap_unfinished, LapNumber, LapType, LapTime, T1, T2, T3, T4, speed) %>%
group_by() %>%
fill(c("Front_tire_age", "Rear_tire_age")) %>%
group_by(Rider, run_number, is_lap, year, event, session) %>%
mutate(
Front_tire_age = min(Front_tire_age, na.rm=TRUE) + row_number() - 1,
Rear_tire_age = min(Rear_tire_age, na.rm=TRUE) + row_number() - 1
) %>%
group_by() %>%
filter(is_lap) %>%
select(-is_lap) %>%
mutate(
Invalidated_T1 = str_extract(T1, "\\*") == "*",
Invalidated_T2 = str_extract(T2, "\\*") == "*",
Invalidated_T3 = str_extract(T3, "\\*") == "*",
Invalidated_T4 = str_extract(T4, "\\*") == "*",
T1 = str_replace(T1, "\\*", ""),
T2 = str_replace(T2, "\\*", ""),
T3 = str_replace(T3, "\\*", ""),
T4 = str_replace(T4, "\\*", ""),
LapTimeSeconds = as.double(str_extract(LapTime, rexp_lap_minutes)) * 60.0 + as.double(str_extract(LapTime, rexp_lap_seconds)),
T1 = if_else(!is.na(str_match(T1, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double(str_extract(T1, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T1, rexp_lap_seconds)),
as.double(T1)),
T2 = if_else(!is.na(str_match(T2, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double( str_extract(T2, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T2, rexp_lap_seconds)),
as.double(T2)),
T3 = if_else(!is.na(str_match(T3, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double( str_extract(T3, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T3, rexp_lap_seconds)),
as.double(T3)),
T4 = if_else(!is.na(str_match(T4, "\\d+\\'\\d{2}\\.\\d{3}")),
as.double(str_extract(T4, rexp_lap_minutes)) * 60.0 + as.double(str_extract(T4, rexp_lap_seconds)),
as.double(T4))
)
practice <- df %>% filter(session != 'RAC')
races <- df %>%  filter(session == 'RAC') %>% select(year, event, riderNumber, RiderPosition)
races
races <- df %>%
filter(session == 'RAC') %>%
select(year, event, riderNumber, RiderPosition) %>%
distinct()
races
practice %>%
left_join(races, by = c("year", "event", "riderNumber")) %>%
practice %>%
left_join(races, by = c("year", "event", "riderNumber"))
practice <- df %>% filter(session != 'RAC')
races <- df %>%
filter(session == 'RAC') %>%
select(year, event, riderNumber, RiderPosition) %>%
distinct()
practice %>%
left_join(races, by = c("year", "event", "riderNumber"))
races <- df %>%
filter(session == 'RAC') %>%
select(year, event, riderNumber, RiderPosition) %>%
rename(y = RiderPosition)
practice %>%
left_join(races, by = c("year", "event", "riderNumber"))
races <- df %>%
filter(session == 'RAC') %>%
select(year, event, riderNumber, RiderPosition) %>%
rename(y = RiderPosition) %>%
mutate(y = as.factor(y))
races <- df %>%
filter(session == 'RAC') %>%
select(year, event, riderNumber, RiderPosition) %>%
rename(y = RiderPosition) %>%
mutate(y = as.factor(y)) %>%
distinct()
practice %>%
left_join(races, by = c("year", "event", "riderNumber"))
practice %>%
left_join(races, by = c("year", "event", "riderNumber")) %>%
select(year, event, session, RiderNumber, y)
practice %>%
left_join(races, by = c("year", "event", "riderNumber")) %>%
select(year, event, session, ridernumber, y)
practice %>%
left_join(races, by = c("year", "event", "riderNumber")) %>%
select(year, event, session, rider_number, y)
practice %>%
left_join(races, by = c("year", "event", "riderNumber")) %>%
select(year, event, session, riderNumber, y)
rm(list = ls())
