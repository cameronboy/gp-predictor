{
    "data" : [
        "> ",
        "library(tabulizer)",
        "> ",
        "library(plyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(miniUI)",
        "> ",
        "library(stringr)",
        "> ",
        "library(lubridate)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Some important Variables to define the overall list of sessions to process",
        "> ",
        "library(data.table)",
        "> ",
        "session <- c(\"FP1\", \"FP2\")#, \"FP3\", \"FP4\", \"Q1\", \"Q2\", \"WUP\")",
        "> ",
        "event <- c(\"QAT\", \"ARG\")#, \"AME\", \"SPA\", \"FRA\", \"ITA\", \"CAT\", \"NED\", \"GER\", \"AUT\", \"CZE\", \"GBR\", \"RSM\",\"ARA\")",
        "> ",
        "type <- c(\"Classification\")",
        "> ",
        "x <- as.matrix(CJ(event, session, type))",
        "> ",
        "  ",
        "> ",
        "datalist = list()",
        "> ",
        "",
        "> ",
        "##Loop through the sessions  ",
        "> ",
        "for ( i in seq(nrow(x))) {",
        "+ ",
        "  url <-  paste(\"http://resources.motogp.com/files/results/2016/\", x[i,1], \"/MotoGP/\"",
        "+ ",
        "                , x[i,2],\"/\",x[i,3],\".pdf\", sep = \"\")",
        "+ ",
        "  #Extract the data Table and store it in a dataframe",
        "+ ",
        "  dat <- data.frame(extract_areas(urls), stringsAsFactors = FALSE)",
        "+ ",
        "  #Remove headers now before we append into one big datafrome",
        "+ ",
        "  dat <- dat[-1,]",
        "+ ",
        "  #add the pdf URL to the dataframe",
        "+ ",
        "  dat$i <- url",
        "+ ",
        "  #Adding Session info",
        "+ ",
        "  dat$Session <- x[i,2]",
        "+ ",
        "  #Append the dataframe to a list",
        "+ ",
        "  datalist[[i]] <- i",
        "+ ",
        "  #print the url to indicate this particular session has been added",
        "+ ",
        "  print(url)",
        "+ ",
        "}",
        "Error in grepl(\"^http.*://\", path) : object 'urls' not found\n",
        "> ",
        "",
        "> ",
        "#Combining our list to a dataframe",
        "> ",
        "df <- ldply(datalist, data.frame)",
        "> ",
        "library(tabulizer)",
        "> ",
        "library(plyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(miniUI)",
        "> ",
        "library(stringr)",
        "> ",
        "library(lubridate)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Some important Variables to define the overall list of sessions to process",
        "> ",
        "library(data.table)",
        "> ",
        "session <- c(\"FP1\", \"FP2\")#, \"FP3\", \"FP4\", \"Q1\", \"Q2\", \"WUP\")",
        "> ",
        "event <- c(\"QAT\", \"ARG\")#, \"AME\", \"SPA\", \"FRA\", \"ITA\", \"CAT\", \"NED\", \"GER\", \"AUT\", \"CZE\", \"GBR\", \"RSM\",\"ARA\")",
        "> ",
        "type <- c(\"Classification\")",
        "> ",
        "x <- as.matrix(CJ(event, session, type))",
        "> ",
        "  ",
        "> ",
        "datalist = list()",
        "> ",
        "",
        "> ",
        "##Loop through the sessions  ",
        "> ",
        "for ( i in seq(nrow(x))) {",
        "+ ",
        "  url <-  paste(\"http://resources.motogp.com/files/results/2016/\", x[i,1], \"/MotoGP/\"",
        "+ ",
        "                , x[i,2],\"/\",x[i,3],\".pdf\", sep = \"\")",
        "+ ",
        "  #Extract the data Table and store it in a dataframe",
        "+ ",
        "  dat <- data.frame(extract_areas(urls), stringsAsFactors = FALSE)",
        "+ ",
        "  #Remove headers now before we append into one big datafrome",
        "+ ",
        "  dat <- dat[-1,]",
        "+ ",
        "  #add the pdf URL to the dataframe",
        "+ ",
        "  dat$i <- url",
        "+ ",
        "  #Adding Session info",
        "+ ",
        "  dat$Session <- x[i,2]",
        "+ ",
        "  #Append the dataframe to a list",
        "+ ",
        "  datalist[[i]] <- dat",
        "+ ",
        "  #print the url to indicate this particular session has been added",
        "+ ",
        "  print(url)",
        "+ ",
        "}",
        "Error in grepl(\"^http.*://\", path) : object 'urls' not found\n",
        "> ",
        "",
        "> ",
        "#Combining our list to a dataframe",
        "> ",
        "df <- ldply(datalist, data.frame)",
        "> ",
        "library(tabulizer)",
        "> ",
        "library(plyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(miniUI)",
        "> ",
        "library(stringr)",
        "> ",
        "library(lubridate)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Some important Variables to define the overall list of sessions to process",
        "> ",
        "library(data.table)",
        "> ",
        "session <- c(\"FP1\", \"FP2\")#, \"FP3\", \"FP4\", \"Q1\", \"Q2\", \"WUP\")",
        "> ",
        "event <- c(\"QAT\", \"ARG\")#, \"AME\", \"SPA\", \"FRA\", \"ITA\", \"CAT\", \"NED\", \"GER\", \"AUT\", \"CZE\", \"GBR\", \"RSM\",\"ARA\")",
        "> ",
        "type <- c(\"Classification\")",
        "> ",
        "x <- as.matrix(CJ(event, session, type))",
        "> ",
        "  ",
        "> ",
        "datalist = list()",
        "> ",
        "",
        "> ",
        "##Loop through the sessions  ",
        "> ",
        "for ( i in seq(nrow(x))) {",
        "+ ",
        "  url <-  paste(\"http://resources.motogp.com/files/results/2016/\", x[i,1], \"/MotoGP/\"",
        "+ ",
        "                , x[i,2],\"/\",x[i,3],\".pdf\", sep = \"\")",
        "+ ",
        "  #Extract the data Table and store it in a dataframe",
        "+ ",
        "  dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)",
        "+ ",
        "  #Remove headers now before we append into one big datafrome",
        "+ ",
        "  dat <- dat[-1,]",
        "+ ",
        "  #add the pdf URL to the dataframe",
        "+ ",
        "  dat$i <- url",
        "+ ",
        "  #Adding Session info",
        "+ ",
        "  dat$Session <- x[i,2]",
        "+ ",
        "  #Append the dataframe to a list",
        "+ ",
        "  datalist[[i]] <- dat",
        "+ ",
        "  #print the url to indicate this particular session has been added",
        "+ ",
        "  print(url)",
        "+ ",
        "}",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/ARG/MotoGP/FP1/Classification.pdf\"\n",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/ARG/MotoGP/FP2/Classification.pdf\"\n",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP1/Classification.pdf\"\n",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP2/Classification.pdf\"\n",
        "> ",
        "",
        "> ",
        "#Combining our list to a dataframe",
        "> ",
        "df <- ldply(datalist, data.frame)",
        "> ",
        "df <- filter(df, df$X2 != \"\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting the lapss col into two",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 84, 82\n",
        "> ",
        "",
        "> ",
        "#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first. ",
        "> ",
        "#This will allow us to have vlaues in all rows for a column we'll split below.",
        "> ",
        "",
        "> ",
        "df[df==\"\"] <- NA",
        "> ",
        "",
        "> ",
        "df$X9[[1]] <- \"0 0\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting fo that column.",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))",
        "> ",
        "",
        "> ",
        "#Removal of the columns we split",
        "> ",
        "df <- df[, c(-8,-9)]",
        "> ",
        "",
        "> ",
        "#Column Reorder",
        "> ",
        "df <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]",
        "Error in `[.data.frame`(df, , c(1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 8,  : \n  undefined columns selected\n",
        "> ",
        "",
        "> ",
        "#Add Names to Column",
        "> ",
        "names(df) <- c(\"Pos\",\"RiderNumber\",\"Rider\",\"Nation\",\"Team\",\"Motorcycle\",\"Time\",\"FastLap\",\"TotalLaps\",\"GapFront\",\"GapNext\",\"Speed\",\"Session\",\"URL\")",
        "Error in names(df) <- c(\"Pos\", \"RiderNumber\", \"Rider\", \"Nation\", \"Team\",  : \n  'names' attribute [14] must be the same length as the vector [12]\n",
        "> ",
        "",
        "> ",
        "#Conversion of numeric fields to numeric",
        "> ",
        "df[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "",
        "> ",
        "#Adding a few more valuable fields",
        "> ",
        "df$Event   <- substr(df$Session, 1, str_locate(df$Session,\"-\")[1,]-1)",
        "> ",
        "df$Session <- substr(df$Session,  str_locate(df$Session,\"-\")[1,]+1, str_length(df$Session))",
        "> ",
        "df$Time    <- ms(df$Time)",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 0, 1\n",
        "In addition: ",
        "Warning message:\n",
        "In .parse_hms(..., order = \"MS\", quiet = quiet) :",
        "\n ",
        " Some strings failed to parse\n",
        "> ",
        "df$Time_S  <- period_to_seconds(ms(df$Time))",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 0, 1\n",
        "In addition: ",
        "Warning message:\n",
        "In .parse_hms(..., order = \"MS\", quiet = quiet) :",
        "\n ",
        " Some strings failed to parse\n",
        "> ",
        "df$Year    <- sapply(sapply(\"2016\",as.character),as.numeric)",
        "> ",
        "library(tabulizer)",
        "> ",
        "library(plyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(miniUI)",
        "> ",
        "library(stringr)",
        "> ",
        "library(lubridate)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Some important Variables to define the overall list of sessions to process",
        "> ",
        "library(data.table)",
        "> ",
        "session <- c(\"FP1\", \"FP2\")#, \"FP3\", \"FP4\", \"Q1\", \"Q2\", \"WUP\")",
        "> ",
        "event <- c(\"QAT\")#\"ARG\", \"AME\", \"SPA\", \"FRA\", \"ITA\", \"CAT\", \"NED\", \"GER\", \"AUT\", \"CZE\", \"GBR\", \"RSM\",\"ARA\")",
        "> ",
        "type <- c(\"Classification\")",
        "> ",
        "x <- as.matrix(CJ(event, session, type))",
        "> ",
        "  ",
        "> ",
        "datalist = list()",
        "> ",
        "",
        "> ",
        "##Loop through the sessions  ",
        "> ",
        "for ( i in seq(nrow(x))) {",
        "+ ",
        "  url <-  paste(\"http://resources.motogp.com/files/results/2016/\", x[i,1], \"/MotoGP/\"",
        "+ ",
        "                , x[i,2],\"/\",x[i,3],\".pdf\", sep = \"\")",
        "+ ",
        "  #Extract the data Table and store it in a dataframe",
        "+ ",
        "  dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)",
        "+ ",
        "  #Remove headers now before we append into one big datafrome",
        "+ ",
        "  dat <- dat[-1,]",
        "+ ",
        "  #add the pdf URL to the dataframe",
        "+ ",
        "  dat$i <- url",
        "+ ",
        "  #Adding Session info",
        "+ ",
        "  dat$Session <- x[i,2]",
        "+ ",
        "  dat$Event <- x[i,1]",
        "+ ",
        "  #Append the dataframe to a list",
        "+ ",
        "  datalist[[i]] <- dat",
        "+ ",
        "  #print the url to indicate this particular session has been added",
        "+ ",
        "  print(url)",
        "+ ",
        "}",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP1/Classification.pdf\"\n",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP2/Classification.pdf\"\n",
        "> ",
        "",
        "> ",
        "#Combining our list to a dataframe",
        "> ",
        "df <- ldply(datalist, data.frame)",
        "> ",
        "",
        "> ",
        "#Removal of Blanks from the Time Column. Only Classified riders",
        "> ",
        "df <- filter(df, df$X2 != \"\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting the lapss col into two",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))",
        "> ",
        "",
        "> ",
        "#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first. ",
        "> ",
        "#This will allow us to have vlaues in all rows for a column we'll split below.",
        "> ",
        "",
        "> ",
        "df[df==\"\"] <- NA",
        "> ",
        "",
        "> ",
        "df$X9[[1]] <- \"0 0\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting fo that column.",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))",
        "> ",
        "",
        "> ",
        "#Removal of the columns we split",
        "> ",
        "df <- df[, c(-8,-9)]",
        "> ",
        "",
        "> ",
        "#Column Reorder",
        "> ",
        "#f <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]",
        "> ",
        "",
        "> ",
        "#Add Names to Column",
        "> ",
        "#ames(df) <- c(\"Pos\",\"RiderNumber\",\"Rider\",\"Nation\",\"Team\",\"Motorcycle\",\"Time\",\"FastLap\",\"TotalLaps\",\"GapFront\",\"GapNext\",\"Speed\",\"Session\",\"URL\")",
        "> ",
        "",
        "> ",
        "#Conversion of numeric fields to numeric",
        "> ",
        "#f[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)",
        "> ",
        "",
        "> ",
        "#Adding a few more valuable fields",
        "> ",
        "df$Time_S  <- period_to_seconds(ms(df$Time))",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 0, 1\n",
        "In addition: ",
        "Warning message:\n",
        "In .parse_hms(..., order = \"MS\", quiet = quiet) :",
        "\n ",
        " Some strings failed to parse\n",
        "> ",
        "df$Year    <- sapply(sapply(\"2016\",as.character),as.numeric)",
        "> ",
        "df <- df[, c(1,2,3,4,5,6,7,12,13,14,15,8,10,9)]",
        "> ",
        "library(tabulizer)",
        "> ",
        "library(plyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(miniUI)",
        "> ",
        "library(stringr)",
        "> ",
        "library(lubridate)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Some important Variables to define the overall list of sessions to process",
        "> ",
        "library(data.table)",
        "> ",
        "session <- c(\"FP1\", \"FP2\")#, \"FP3\", \"FP4\", \"Q1\", \"Q2\", \"WUP\")",
        "> ",
        "event <- c(\"QAT\")#\"ARG\", \"AME\", \"SPA\", \"FRA\", \"ITA\", \"CAT\", \"NED\", \"GER\", \"AUT\", \"CZE\", \"GBR\", \"RSM\",\"ARA\")",
        "> ",
        "type <- c(\"Classification\")",
        "> ",
        "x <- as.matrix(CJ(event, session, type))",
        "> ",
        "  ",
        "> ",
        "datalist = list()",
        "> ",
        "",
        "> ",
        "##Loop through the sessions  ",
        "> ",
        "for ( i in seq(nrow(x))) {",
        "+ ",
        "  url <-  paste(\"http://resources.motogp.com/files/results/2016/\", x[i,1], \"/MotoGP/\"",
        "+ ",
        "                , x[i,2],\"/\",x[i,3],\".pdf\", sep = \"\")",
        "+ ",
        "  #Extract the data Table and store it in a dataframe",
        "+ ",
        "  dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)",
        "+ ",
        "  #Remove headers now before we append into one big datafrome",
        "+ ",
        "  dat <- dat[-1,]",
        "+ ",
        "  #add the pdf URL to the dataframe",
        "+ ",
        "  dat$i <- url",
        "+ ",
        "  #Adding Session info",
        "+ ",
        "  dat$Session <- x[i,2]",
        "+ ",
        "  dat$Event <- x[i,1]",
        "+ ",
        "  #Append the dataframe to a list",
        "+ ",
        "  datalist[[i]] <- dat",
        "+ ",
        "  #print the url to indicate this particular session has been added",
        "+ ",
        "  print(url)",
        "+ ",
        "}",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP1/Classification.pdf\"\n",
        "\nListening on http://127.0.0.1:4557\n",
        "[1] \"http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP2/Classification.pdf\"\n",
        "> ",
        "",
        "> ",
        "#Combining our list to a dataframe",
        "> ",
        "df <- ldply(datalist, data.frame)",
        "> ",
        "",
        "> ",
        "#Removal of Blanks from the Time Column. Only Classified riders",
        "> ",
        "df <- filter(df, df$X2 != \"\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting the lapss col into two",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))",
        "> ",
        "",
        "> ",
        "#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first. ",
        "> ",
        "#This will allow us to have vlaues in all rows for a column we'll split below.",
        "> ",
        "",
        "> ",
        "df[df==\"\"] <- NA",
        "> ",
        "",
        "> ",
        "df$X9[[1]] <- \"0 0\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Splitting fo that column.",
        "> ",
        "df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))",
        "> ",
        "",
        "> ",
        "#Removal of the columns we split",
        "> ",
        "df <- df[, c(-8,-9)]",
        "> ",
        "df <- df[, c(1,2,3,4,5,6,7,12,13,14,15,8,10,11,9)]",
        "> ",
        "ames(df) <- c(\"Pos\",\"RiderNumber\",\"Rider\",\"Nation\",\"Team\",\"Motorcycle\",\"Time\",\"FastLap\",\"TotalLaps\",\"GapFront\",\"GapNext\",\"Speed\",\"Session\",\"Event\",\"URL\")",
        "Error in ames(df) <- c(\"Pos\", \"RiderNumber\", \"Rider\", \"Nation\", \"Team\",  : \n  could not find function \"ames<-\"\n",
        "> ",
        "names(df) <- c(\"Pos\",\"RiderNumber\",\"Rider\",\"Nation\",\"Team\",\"Motorcycle\",\"Time\",\"FastLap\",\"TotalLaps\",\"GapFront\",\"GapNext\",\"Speed\",\"Session\",\"Event\",\"URL\")",
        "> ",
        "library(babynames) # data package",
        "Error in library(babynames) : there is no package called ‘babynames’\n",
        "> ",
        "library(dplyr)     # provides data manipulating functions.",
        "> ",
        "library(magrittr)  # ceci n'est pas un pipe",
        "Warning message:\n",
        "package ‘magrittr’ was built under R version 3.3.1 \n",
        "> ",
        "library(ggplot2)   # for graphics",
        "Find out what's changed in ggplot2 at http://github.com/hadley/ggplot2/releases.\n",
        "Warning message:\n",
        "package ‘ggplot2’ was built under R version 3.3.1 \n",
        "> ",
        "",
        "> ",
        "babynames %>%",
        "+ ",
        "  filter(name %>% substr(1, 3) %>% equals(\"Ste\")) %>%",
        "+ ",
        "  group_by(year, sex) %>%",
        "+ ",
        "  summarize(total = sum(n)) %>%",
        "+ ",
        "  qplot(year, total, color = sex, data = ., geom = \"line\") %>%",
        "+ ",
        "  add(ggtitle('Names starting with \"Ste\"')) %>%",
        "+ ",
        "  print",
        "Error in eval(expr, envir, enclos) : object 'babynames' not found\n",
        "> ",
        "sapply(c(\"babynames\",\"dplyr\",\"magrittr\",\"ggplot2\"), install.packages)",
        "Installing package into ‘C:/Users/boyxx/Documents/R/win-library/3.2’\n(as ‘lib’ is unspecified)\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.2/babynames_0.2.1.zip'\n",
        " length 9141906 bytes (8.7 MB)\n",
        "downloaded 8.7 MB\n\n",
        "package ‘babynames’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\boyxx\\AppData\\Local\\Temp\\Rtmpy0UDwr\\downloaded_packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\n$babynames\nNULL\n\n$dplyr\nNULL\n\n$magrittr\nNULL\n\n$ggplot2\nNULL\n\n\nRestarting R session...\n\n\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        2
    ]
}