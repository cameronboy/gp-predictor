df <- subset(df, grepl("\\d",df$X1) )
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df$X9 <- replace(df$X9, !grepl("\\d",df$X9), "0 0")
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
#Column Reorder
df <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]
#Add Names to Column
names(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","URL")
#Conversion of numeric fields to numeric
df[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)
#Adding a few more valuable fields
df$Event   <- substr(df$Session, 1, str_locate(df$Session,"-")[1,]-1)
df$Session <- substr(df$Session,  str_locate(df$Session,"-")[1,]+1, str_length(df$Session))
df$Time    <- ms(df$Time)
df$Time_S  <- period_to_seconds(ms(df$Time))
df$Year    <- sapply(sapply("2016",as.character),as.numeric)
cn <- odbcDriverConnect(connection="Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=MGPT;Data Source=DESKTOP-D7U8HC0\SQLEXPRESS;Extended Properties="Server=localhost\SQLEXPRESS;Database=MGPT;Trusted_Connection=True""
View(df)
write.csv(df,"Load first.csv")
getwd()
ex <- data.frame(extract_tables(urls[1], pages = 2, guess = FALSE, area = list(c(42, 78, 734, 133)), method = "data.frame")
,stringsAsFactors = FALSE)
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
ex <- data.frame(extract_tables(urls[1], pages = 2, guess = FALSE, area = list(c(42, 78, 734, 133)), method = "data.frame")
,stringsAsFactors = FALSE)
cd <- ex
urls
u <- "http://resources.motogp.com/files/results/2016/QAT/MotoGP/FP1/Analysis.pdf"
ex <- data.frame(extract_tables(u, pages = 2, guess = FALSE, area = list(c(42, 78, 734, 133)), method = "data.frame")
,stringsAsFactors = FALSE)
cd <- ex
cd
filter(cd,!grepl("[a-z]$",cd$Lap.Time))
cd
filter(cd,!grepl("[a-z]$",cd$Lap.Time))
devtools::install_github('rstudio/DT')
LIBRARY(DT)
datatable(iris)
LIBRARY(DT)
library(DT)
datatable(iris)
datatable(df)
library(weatherData)
install.packages("weatherData")
library(weatherData)
library(httr)
install.packages("httr")
install.packages("httr")
library(httr)
r <- GET("http://httpbin.org/get")
rm(list = ls())
library(httr)
r <- GET("http://httpbin.org/get")
r
r[1]
r$headers
get("http://api.wunderground.com/api/b6ec7eb0830bbbbb/hourly/q/CA/San_Francisco.json")
?httr
get("http://google.com/", path = "search", query = list(q = "ham"))
httr::GET("http://google.com/", path = "search", query = list(q = "ham"))
httr:GET("http://api.wunderground.com/api/b6ec7eb0830bbbbb/hourly/q/CA/San_Francisco")
httr::GET("http://api.wunderground.com/api/b6ec7eb0830bbbbb/hourly/q/CA/San_Francisco")
httr::GET("http://api.wunderground.com/api/b6ec7eb0830bbbbb/hourly/q/CA/San_Francisco.json")
r<- httr::GET("http://api.wunderground.com/api/b6ec7eb0830bbbbb/hourly/q/CA/San_Francisco.json")
r
r$content
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
session <- c("FP1")#,"FP2","FP3","FP4","Q1","Q2","WUP")
event   <- c("ITA")#,"ARG","AME","SPA","FRA","ITA","CAT","NED","GER","AUT","CZE","GBR","RSM")
j <- rep(sprintf(session), each = length(event))
i <- sprintf(event)
urls <- paste("http://resources.motogp.com/files/results/2016/", i, "/MotoGP/"
, j,"/Classification.pdf", sep = "")
ses <- paste(i, j, sep = "-")
datalist = list()
##Loop through the sessions
for ( i in seq(urls)) {
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(urls[i]), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- urls[i]
#Adding Session info
dat$Session <- ses[i]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(urls[i])
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
session <- c("FP1")#,"FP2","FP3","FP4","Q1","Q2","WUP")
event   <- c("AME")#,"ARG","AME","SPA","FRA","ITA","CAT","NED","GER","AUT","CZE","GBR","RSM")
j <- rep(sprintf(session), each = length(event))
i <- sprintf(event)
urls <- paste("http://resources.motogp.com/files/results/2016/", i, "/MotoGP/"
, j,"/Classification.pdf", sep = "")
ses <- paste(i, j, sep = "-")
datalist = list()
##Loop through the sessions
for ( i in seq(urls)) {
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(urls[i]), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- urls[i]
#Adding Session info
dat$Session <- ses[i]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(urls[i])
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
View(df)
#Removal of Blanks from the Time Column. Only Classified riders
df <- filter(df, df$X2 != "")
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df[df==""] <- NA
df$X9[[1]] <- "0 0"
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
#Column Reorder
df <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]
#Add Names to Column
names(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","URL")
#Conversion of numeric fields to numeric
df[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)
#Adding a few more valuable fields
df$Event   <- substr(df$Session, 1, str_locate(df$Session,"-")[1,]-1)
df$Session <- substr(df$Session,  str_locate(df$Session,"-")[1,]+1, str_length(df$Session))
df$Time    <- ms(df$Time)
df$Time_S  <- period_to_seconds(ms(df$Time))
df$Year    <- sapply(sapply("2016",as.character),as.numeric)
write.csv(df, "woo.csv")
library(data.table)
install.packages("data.table")
library(data.table)  #Used for Cross Joining our
options(download.file.method = "libcurl")
session <- c("FP1")#, "FP2", "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")#), "Analysis")
x <- as.matrix(CJ(event, session, type))
x
for (i in seq(nrow(x))) {
download.file(paste("http://resources.motogp.com/files/results/2016/"
, x[i, 1], "/MotoGP/", x[i, 2], "/", x[i, 3], ".pdf"
, sep = "")
, paste("C:\\Users\\boyxx\\Documents\\MotoGP Stats\\RawPdfs"
, paste(x[i, 1], "-", x[i, 2], "-", x[i, 3], ".pdf", sep = "")), mode = "wb")
}
x
library(data.table)  #Used for Cross Joining our
options(download.file.method = "libcurl")
session <- c("FP1", "FP2", "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")#), "Analysis")
x <- as.matrix(CJ(event, session, type))
x
session <- c("FP1", "FP2", "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification","Analysis")
x <- as.matrix(CJ(event, session, type))
x
rm(list = ls())
session <- c("FP1", "FP2", "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
#Some important Variables to define the overall list of sessions to process
rm(list = ls())
session <- c("FP1")#,"FP2","FP3","FP4","Q1","Q2","WUP")
event   <- c("ITA")#,"ARG","AME","SPA","FRA","ITA","CAT","NED","GER","AUT","CZE","GBR","RSM")
j <- rep(sprintf(session), each = length(event))
i <- sprintf(event)
urls <- paste("http://resources.motogp.com/files/results/2016/", i, "/MotoGP/"
, j,"/Classification.pdf", sep = "")
ses <- paste(i, j, sep = "-")
datalist = list()
##Loop through the sessions
for ( i in seq(urls)) {
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(urls[i]), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- urls[i]
#Adding Session info
dat$Session <- ses[i]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(urls[i])
}
df <- ldply(datalist, data.frame)
#Removal of Blanks from the Time Column. Only Classified riders
df <- filter(df, df$X2 != "")
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df[df==""] <- NA
df$X9[[1]] <- "0 0"
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
#Column Reorder
df <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]
#Add Names to Column
names(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","URL")
#Conversion of numeric fields to numeric
df[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)
#Adding a few more valuable fields
df$Event   <- substr(df$Session, 1, str_locate(df$Session,"-")[1,]-1)
df$Session <- substr(df$Session,  str_locate(df$Session,"-")[1,]+1, str_length(df$Session))
df$Time    <- ms(df$Time)
df$Time_S  <- period_to_seconds(ms(df$Time))
df$Year    <- sapply(sapply("2016",as.character),as.numeric)
library(data.table)
session <- c("FP1", "FP2", "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
combo <- as.matrix(CJ(event, session, type))
combo
x <- as.matrix(CJ(event, session, type))
urls <- paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
rm(urls)
urls <- for (i in seq(nrow(x))){
urls[i] <- paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
}
urls <- ""
urls <- for (i in seq(nrow(x))){
urls[i] <- paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
}
urls <- data.frame()
urls <- for (i in seq(nrow(x))){
urls[i] <- paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
}
paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
rm(list = ls())
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
library(data.table)
session <- c("FP1", "FP2")#, "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG")#, "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
datalist = list()
##Loop through the sessions
for ( i in seq(nrow(x))) {
url <-  paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(urls), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- url
#Adding Session info
dat$Session <- x[i,2]
#Append the dataframe to a list
datalist[[i]] <- i
#print the url to indicate this particular session has been added
print(url)
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
library(data.table)
session <- c("FP1", "FP2")#, "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG")#, "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
datalist = list()
##Loop through the sessions
for ( i in seq(nrow(x))) {
url <-  paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(urls), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- url
#Adding Session info
dat$Session <- x[i,2]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(url)
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
library(data.table)
session <- c("FP1", "FP2")#, "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT", "ARG")#, "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
datalist = list()
##Loop through the sessions
for ( i in seq(nrow(x))) {
url <-  paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- url
#Adding Session info
dat$Session <- x[i,2]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(url)
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
df <- filter(df, df$X2 != "")
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df[df==""] <- NA
df$X9[[1]] <- "0 0"
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
#Column Reorder
df <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]
#Add Names to Column
names(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","URL")
#Conversion of numeric fields to numeric
df[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)
#Adding a few more valuable fields
df$Event   <- substr(df$Session, 1, str_locate(df$Session,"-")[1,]-1)
df$Session <- substr(df$Session,  str_locate(df$Session,"-")[1,]+1, str_length(df$Session))
df$Time    <- ms(df$Time)
df$Time_S  <- period_to_seconds(ms(df$Time))
df$Year    <- sapply(sapply("2016",as.character),as.numeric)
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
library(data.table)
session <- c("FP1", "FP2")#, "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT")#"ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
datalist = list()
##Loop through the sessions
for ( i in seq(nrow(x))) {
url <-  paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- url
#Adding Session info
dat$Session <- x[i,2]
dat$Event <- x[i,1]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(url)
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
#Removal of Blanks from the Time Column. Only Classified riders
df <- filter(df, df$X2 != "")
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df[df==""] <- NA
df$X9[[1]] <- "0 0"
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
#Column Reorder
#f <- df[, c(1,2,3,4,5,6,7,11,12,13,14,8,10,9)]
#Add Names to Column
#ames(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","URL")
#Conversion of numeric fields to numeric
#f[,c(1,2,8,9,10,11,12)] <- sapply(sapply(df[,c(1,2,8,9,10,11,12)], as.character), as.numeric)
#Adding a few more valuable fields
df$Time_S  <- period_to_seconds(ms(df$Time))
df$Year    <- sapply(sapply("2016",as.character),as.numeric)
df <- df[, c(1,2,3,4,5,6,7,12,13,14,15,8,10,9)]
library(tabulizer)
library(plyr)
library(dplyr)
library(miniUI)
library(stringr)
library(lubridate)
#Some important Variables to define the overall list of sessions to process
library(data.table)
session <- c("FP1", "FP2")#, "FP3", "FP4", "Q1", "Q2", "WUP")
event <- c("QAT")#"ARG", "AME", "SPA", "FRA", "ITA", "CAT", "NED", "GER", "AUT", "CZE", "GBR", "RSM","ARA")
type <- c("Classification")
x <- as.matrix(CJ(event, session, type))
datalist = list()
##Loop through the sessions
for ( i in seq(nrow(x))) {
url <-  paste("http://resources.motogp.com/files/results/2016/", x[i,1], "/MotoGP/"
, x[i,2],"/",x[i,3],".pdf", sep = "")
#Extract the data Table and store it in a dataframe
dat <- data.frame(extract_areas(url), stringsAsFactors = FALSE)
#Remove headers now before we append into one big datafrome
dat <- dat[-1,]
#add the pdf URL to the dataframe
dat$i <- url
#Adding Session info
dat$Session <- x[i,2]
dat$Event <- x[i,1]
#Append the dataframe to a list
datalist[[i]] <- dat
#print the url to indicate this particular session has been added
print(url)
}
#Combining our list to a dataframe
df <- ldply(datalist, data.frame)
#Removal of Blanks from the Time Column. Only Classified riders
df <- filter(df, df$X2 != "")
#Splitting the lapss col into two
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X8),   ' ', fixed=TRUE))))
#Adding a dataframe to fill in the 0 0 results for the gaps for riders who finished first.
#This will allow us to have vlaues in all rows for a column we'll split below.
df[df==""] <- NA
df$X9[[1]] <- "0 0"
#Splitting fo that column.
df <- cbind(df, data.frame(do.call('rbind', strsplit(as.character(df$X9),   ' ', fixed=TRUE))))
#Removal of the columns we split
df <- df[, c(-8,-9)]
df <- df[, c(1,2,3,4,5,6,7,12,13,14,15,8,10,11,9)]
ames(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","Event","URL")
names(df) <- c("Pos","RiderNumber","Rider","Nation","Team","Motorcycle","Time","FastLap","TotalLaps","GapFront","GapNext","Speed","Session","Event","URL")
library(babynames) # data package
library(dplyr)     # provides data manipulating functions.
library(magrittr)  # ceci n'est pas un pipe
library(ggplot2)   # for graphics
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Ste")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('Names starting with "Ste"')) %>%
print
sapply(c("babynames","dplyr","magrittr","ggplot2"), install.packages)
